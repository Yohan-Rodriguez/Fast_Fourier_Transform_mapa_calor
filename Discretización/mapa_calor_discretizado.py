# -*- coding: utf-8 -*-
"""mapa_calor_discretizado

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KyP3GJD25CIzOHebdtHce_Bvr-QnVfxT

# 1) **Librerías**
"""

import os
from google.colab import drive

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


# Habilitar mostrar todas las columnas
pd.set_option('display.max_columns', None)

# Montar Google Drive
drive.mount('/content/drive')

"""# **Gráfica discretizada del mapa de calor**"""

# Ancho de de la imagen
num_px_col = 800

# Función para crear el dataframe y crear la imagen de una fecha en específico
def graph_img_bin(bin_img, num_div):
  # Crear el DataFrame
  df = pd.read_csv(bin_img, header=None)

  # Número de divisiones (# de filas) a tener en cuenta para gráficar cada punto
  num_div = num_div

  # Almacenar la suma de pixeles tomados como blancos en cada división
  list_sum_divisiones = []

  # Iterar sobre el rango de divisiones establecido de columas a sumar
  for i, j in zip(list(range(0, num_px_col, num_div)), list(range(num_div, num_px_col, num_div))):
    # Almacenar las suma de cada división y almacenarla en la lista "list_sum_divisiones"
    list_sum_divisiones.append(df[[i_col for i_col in df.columns[i:j]]].sum().sum())


  # Gráficar
  plt.figure(figsize=(12, 6))
  sns.lineplot(list_sum_divisiones, color='orange')
  plt.gca().set_facecolor('g')
  plt.title('Intensidad de juego de: {}'.format(bin_img[4:-4]))
  plt.xlabel('Cancha')
  plt.ylabel('Intensidad de juego')

  # Agregar asintotas vertical
  plt.axvline(x=400/num_div, color='red', linestyle='--')
  plt.axvline(x=100/num_div, color='blue', linestyle='solid', alpha=0.5)
  plt.axvline(x=700/num_div, color='blue', linestyle='solid', alpha=0.5)

  plt.grid()
  plt.show()

  # Guardar la imagen
  # plt.savefig('/content/{}.png'.format(bin_img))

  return df

'''
Iterar sobre cada archivo .csv de loas binarios de la trasnformada inversa obtenidos de cada imagen
'''

# Ruta del directorio que contiene los archivos
directorio = '/content/'

# Obtener la lista de los nombres de los archivos en el directorio
archivos = os.listdir(directorio)
archivos.sort()

# # Borrar los directorios propios de Colab
archivos_finales = []
for i_fecha in archivos:
  if i_fecha.__contains__('bin_fecha'):
    archivos_finales.append(i_fecha)
# archivos.pop(0)

dict_local = {'FECHA': [], 'CAMPO_PROPIO [%]': [], 'CAMPO_RIVAL [%]': []}

# Graficas cada archivo binario de la trasnformada inversa obtenidos
for i_fecha in archivos_finales:
  df_h = graph_img_bin(i_fecha, 1)

  # Posesión Local en campo propio
  list_col_h_400 = [i for i in df_h.columns if i < 400]
  posesion_h_400 = df_h[list_col_h_400].sum().sum()

  # Posesión Local en campo rival
  list_col_h_800 = [i for i in df_h.columns if i >= 400]
  posesion_h_800 = df_h[list_col_h_800].sum().sum()

  # Posesión total del local cancha completa
  posesion_total_h = posesion_h_400 + posesion_h_800

  # Porcentaje posesión del local en campo propio
  porcentaje_local_campo_propio = posesion_h_400 * 100 / posesion_total_h

  dict_local['FECHA'].append(i_fecha[4:-4])
  dict_local['CAMPO_PROPIO [%]'].append(porcentaje_local_campo_propio)
  dict_local['CAMPO_RIVAL [%]'].append(100 - porcentaje_local_campo_propio)

df_h = pd.DataFrame(data=dict_local)
df_h = df_h.round(2)

df_h